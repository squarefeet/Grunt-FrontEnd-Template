/**
 * -------------------------------------------------------
 * DO NOT EDIT THIS FILE!
 * Use ./gruntConfig.js instead.
 * -------------------------------------------------------
 */

var path = require( 'path' ),
    utils = require( 'util' ),
    config = require( './gruntConfig.js' ),
    fileTree;


function setupFileTree() {
    var tree = {
        paths: {},
        files: {}
    };

    // Setup JS paths
    tree.paths.js = {};
    tree.paths.js.source = path.join( config.paths.source, config.paths.js, '**', '*.js' );
    tree.paths.js.sourceRaw = path.join( config.paths.source, config.paths.js );
    tree.paths.js.development = path.join( config.paths.development, config.paths.js, config.filenames.js );
    tree.paths.js.developmentRaw = path.join( config.paths.development, config.paths.js );
    tree.paths.js.developmentAll = path.join( config.paths.development, config.paths.js, '**', '*.js' );
    tree.paths.js.production = path.join( config.paths.production, config.paths.js, config.filenames.jsMin );

    // Setup CSS paths
    tree.paths.css = {};
    tree.paths.css.source = path.join( config.paths.source, config.paths.css );
    tree.paths.css.developmentRaw = path.join( config.paths.development, config.paths.css );
    tree.paths.css.development = path.join( config.paths.development, config.paths.css, '**', '*.css' );
    tree.paths.css.production = path.join( config.paths.production, config.paths.css, config.filenames.cssMin );

    // Setup HTML paths
    tree.files.html = {};
    tree.files.html.source = path.join( config.paths.source, config.filenames.html );
    tree.files.html.development = path.join( config.paths.development, config.filenames.html );
    tree.files.html.production = path.join( config.paths.production, config.filenames.html );

    // Setup Browserify paths
    tree.files.browserify = {};
    tree.files.browserify[ tree.paths.js.development ] = path.join(
        config.paths.source,
        config.paths.js,
        '**', '*.js'
    );

    // Setup HTMLMin paths
    tree.files.htmlMin = {};
    tree.files.htmlMin[ tree.files.html.production ] = tree.files.html.production;

    // Setup uglify paths
    tree.files.uglify = {
        development: {},
        developmentBrowserify: {},
        production: {},
        productionNoBrowserifyNoUglify: {}
    };
    tree.files.uglify.development[ tree.paths.js.development ] = tree.paths.js.development;
    tree.files.uglify.developmentBrowserify[ tree.paths.js.development ] = tree.paths.js.source;
    tree.files.uglify.production[ tree.paths.js.production ] = tree.paths.js.development;
    tree.files.uglify.productionNoBrowserifyNoUglify[ tree.paths.js.production ] = tree.paths.js.developmentAll;

    // Setup CSSMin paths
    tree.files.cssMin = {};
    tree.files.cssMin[ tree.paths.css.production ] = tree.paths.css.development;

    return tree;
}

function setupWatchFiles() {
    var watchFiles = [],
        types = config.modules.watch.listenTo;

    for( var i = 0; i < types.length; ++i ) {
        watchFiles.push( path.join( config.paths.source, '**', '*.' + types[ i ] ) )
    }

    return watchFiles;
}

function getCleanPaths() {
    var paths = [];

    ( config.modules.clean.builds.development && paths.push( config.paths.development ) );
    ( config.modules.clean.builds.production && paths.push( config.paths.production ) );

    return paths;
}

function getDevelopmentTaskList() {
    var tasks = [];

    ( config.modules.clean.enabled && tasks.push( 'clean' ) );

    // Browserify is enabled
    if( config.modules.browserify.enabled ) {
        tasks.push( 'browserify:dev' );
    }

    // Browserify isn't enabled, so we need to tell
    // Uglify to make the development JS file instead.
    else if( config.modules.uglify.development.enabled ) {
        tasks.push( 'uglify:dev' );
    }

    // If Uglify development isn't enabled either,
    // finally fall back to just copying over JS files
    // from the source dir.
    else {
        tasks.push( 'copy:devNoBrowserifyNoUglify' );
    }

    tasks.push( 'copy:devCSS' );


    // Do the same branching as above for
    // the HTML Build module.
    if( config.modules.browserify.enabled ) {
        tasks.push( 'htmlbuild:dev' );
    }
    else if( config.modules.uglify.development.enabled ) {
        tasks.push( 'htmlbuild:dev' );
    }
    else {
        tasks.push( 'htmlbuild:devNoBrowserifyNoUglify' );
    }


    if( config.modules.localServer.development.enabled ) {
        tasks.push( 'connect:developmentServer' );
    }

    return tasks;
}

function getProductionTaskList() {
    var tasks = [];

    if( !config.modules.browserify.enabled && !config.modules.uglify.development.enabled ) {
        tasks.push( 'uglify:prodNoBrowserifyNoUglify' );
    }
    else {
        tasks.push( 'uglify:prod' );
    }


    tasks.push( 'cssmin:prod' );
    tasks.push( 'htmlbuild:prod' );
    tasks.push( 'htmlmin:prod' );

    if( config.modules.localServer.production.enabled ) {
        tasks.push( 'connect:productionServer' );
    }

    return tasks;
}

function getTaskList() {
    var tasks = [];
    tasks = tasks.concat( getDevelopmentTaskList() );
    tasks = tasks.concat( getProductionTaskList() );

    if( config.modules.watch.enabled ) {
        tasks.push( 'watch' );
    }

    return tasks;
}

function getWatchTaskList() {
    var tasks = [];

    if( config.modules.watch.builds.development ) {
        tasks = tasks.concat( getDevelopmentTaskList() );
    }

    if( config.modules.watch.builds.production ) {
        tasks = tasks.concat( getProductionTaskList() )
    }

    // Remove any Connect module servers from the tasklist
    // so we don't try to spawn multiple servers on the
    // same port.
    for( var i = tasks.length - 1; i >= 0; --i ) {
        if( ~tasks[ i ].indexOf( 'connect' ) ) {
            tasks.splice( i, 1 );
        }
    }

    return tasks;
}


fileTree = setupFileTree();


var internals = {
    fileTree: fileTree,
    taskList: getTaskList(),
    clean: getCleanPaths(),

    modules: {
        cssMin: {
            prod: {
                files: fileTree.files.cssMin
            }
        },

        uglify: {
            dev: {
                options: config.modules.uglify.development.options,
                files: fileTree.files.uglify.developmentBrowserify
            },
            prod: {
                options: config.modules.uglify.production.options,
                files: fileTree.files.uglify.production
            },
            prodNoBrowserifyNoUglify: {
                options: config.modules.uglify.production.options,
                files: fileTree.files.uglify.productionNoBrowserifyNoUglify
            }
        },

        copy: {
            devNoBrowserifyNoUglify: {
                files: [
                    {
                        expand: true,
                        cwd: fileTree.paths.js.sourceRaw,
                        src: [ '**' ],
                        dest: fileTree.paths.js.developmentRaw
                    }
                ]
            },
            devCSS: {
                files: [
                    {
                        expand: true,
                        cwd: fileTree.paths.css.source,
                        src: [ '**' ],
                        dest: fileTree.paths.css.developmentRaw
                    }
                ]
            }
        },

        htmlBuild: {
            dev: {
                src: fileTree.files.html.source,
                dest: fileTree.files.html.development,
                options: {
                    beautify: true,
                    relative: true,
                    scripts: {
                        min: fileTree.paths.js.development
                    },
                    styles: {
                        css: fileTree.paths.css.development
                    }
                }
            },
            devNoBrowserifyNoUglify: {
                src: fileTree.files.html.source,
                dest: fileTree.files.html.development,
                options: {
                    beautify: true,
                    relative: true,
                    scripts: {
                        min: fileTree.paths.js.developmentAll
                    },
                    styles: {
                        css: fileTree.paths.css.development
                    }
                }
            },
            prod: {
                src: fileTree.files.html.source,
                dest: fileTree.files.html.production,
                options: {
                    beautify: true,
                    relative: true,
                    scripts: {
                        min: fileTree.paths.js.production
                    },
                    styles: {
                        css: fileTree.paths.css.production
                    }
                }
            }
        },

        browserify: {
            dev: {
                files: fileTree.files.browserify
            }
        },

        preprocess: {
            options: {
                context: {
                    LIVERELOAD: false
                }
            },
            dev: {
                options: {
                    context: {
                        LIVERELOAD: config.modules.liveReload.development.enabled,
                        PORT: config.modules.liveReload.development.port
                    }
                },
                src: fileTree.files.html.development,
                dest: fileTree.files.html.development
            },
            prod: {
                options: {
                    context: {
                        LIVERELOAD: config.modules.liveReload.production.enabled,
                        PORT: config.modules.liveReload.production.port
                    }
                },
                src: fileTree.files.html.production,
                dest: fileTree.files.html.production
            }
        },

        htmlMin: {
            prod: {
                options: {
                    removeComments: true,
                    collapseWhitespace: true
                },
                files: fileTree.files.htmlMin
            }
        },

        watch: {
            scripts: {
                files: setupWatchFiles(),
                tasks: getWatchTaskList(),
                options: {
                    spawn: config.modules.watch.spawn,
                    livereload: config.modules.liveReload.development.enabled || config.modules.liveReload.production.enabled
                }
            }
        },

        connect: {
            developmentServer: {
                options: {
                    port: config.modules.localServer.development.port,
                    base: config.paths.development,
                    livereload: config.modules.liveReload.development.enabled ?
                        config.modules.liveReload.development.port :
                        false
                }
            },
            productionServer: {
                options: {
                    port: config.modules.localServer.production.port,
                    base: config.paths.production,
                    livereload: config.modules.liveReload.development.enabled ?
                        config.modules.liveReload.development.port :
                        false
                }
            }
        }
    }
};

module.exports = internals;